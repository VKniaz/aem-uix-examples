/*
 * <license header>
 */

import React, { useEffect, useState } from "react";
import { lightTheme, Provider, Flex, TextField, View } from "@adobe/react-spectrum";
import { useParams } from 'react-router-dom';
import { extensionId } from "./Constants";
import { attach } from "@adobe/uix-guest";
import Spinner from "./Spinner";

export default () => {
    const [isLoaded, setIsLoaded] = useState(true);
    const [connection, setConnection] = useState();
    const [model, setModel] = useState();
    const [value, setValue] = useState();
    const [error, setError] = useState();
    const [validationState, setValidationState] = useState();

    const { rendererId } = useParams();
    if (!rendererId) {
        console.error('Renderer id parameter is missed');
        return;
    }

    useEffect(() => {
        const init = async () => {
            const connection = await attach({ id: extensionId });

            setConnection(connection);
            setModel(await connection.host.field.getModel());
            setValue(await connection.host.field.getValue());
            setError(await connection.host.field.getError());
            setValidationState(await connection.host.field.getValidationState());
            setIsLoaded(false);
        };
        init().catch((e) =>
            console.log("Extension got the error during initialization:", e)
        );
    }, []);

    const onChangeHandler = (v) => {
        console.log("onChange on extension side", v);
        connection.host.field.onChange(v);
    };

    return (
        <Provider theme={lightTheme} colorScheme="light">
            {!isLoaded ? (
                <>
                    Content generated by the extension Renderer#{rendererId}
                    <Flex direction="column" gap="size-65" marginBottom="size-100">
                        <TextField
                            validationState={error ? "invalid" : validationState}
                            label={model.multi ? null : model.label}
                            aria-label={model.label || model.name}
                            defaultValue={value}
                            maxLength={model.validation.maxLength}
                            isReadOnly={model.readOnly}
                            isDisabled={model.readOnly}
                            isRequired={model.required}
                            errorMessage={error}
                            onChange={onChangeHandler}
                            width="100%"
                        />
                    </Flex>
                </>
                ) : (
                <View width="97%" height="100%">
                    <Spinner />
                </View>
                )}
        </Provider>
    );
};
